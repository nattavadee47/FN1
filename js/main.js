// ========================================
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ Stroke - ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
// main.js
// ========================================
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á fetch API
const API_URL = 'https://bn1-1.onrender.com/api';

fetch(`${API_URL}/getData`)
  .then(res => res.json())
  .then(data => console.log('Data from BN:', data))
  .catch(err => console.error('Error calling BN API:', err));


class StrokeTherapySystem {
    constructor() {
        this.poseDetection = null;
        this.exerciseAnalyzer = null;
        this.canvasRenderer = null;
        this.uiController = null;
        
        this.isSystemReady = false;
        this.isExercising = false;
        this.currentSession = null;
        
        this.sessionTimer = null;
        this.sessionStartTime = null;
        this.sessionDuration = 0;

        // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        this.settings = {
            sensitivity: 80,
            soundEnabled: true
        };
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    async initialize() {
        try {
            console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î Stroke...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
            const browserCheck = this.checkBrowserSupport();
            if (!browserCheck.supported) {
                throw new Error(`‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: ${browserCheck.missing.join(', ')}`);
            }

            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ MediaPipe ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            await this.waitForMediaPipe();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
            this.initializeComponents();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
            this.setupEventListeners();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
            await this.setupPoseDetection();
            
            this.isSystemReady = true;
            console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
            
            return true;

        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ:', error);
            this.showError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
            return false;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    checkBrowserSupport() {
        const missing = [];
        const supported = {
            webrtc: false,
            webgl: false,
            audioContext: false,
            localStorage: false
        };

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WebRTC
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            supported.webrtc = true;
        } else {
            missing.push('Camera Access');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WebGL
        const canvas = document.createElement('canvas');
        if (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')) {
            supported.webgl = true;
        } else {
            missing.push('WebGL');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Audio Context
        if (window.AudioContext || window.webkitAudioContext) {
            supported.audioContext = true;
        } else {
            missing.push('Audio');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Local Storage
        if (window.localStorage) {
            supported.localStorage = true;
        } else {
            missing.push('Local Storage');
        }

        return {
            supported: missing.length === 0,
            missing: missing,
            details: supported
        };
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ MediaPipe ‡πÇ‡∏´‡∏•‡∏î
    async waitForMediaPipe() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 100;
            
            const checkMediaPipe = () => {
                attempts++;
                
                if (window.Pose && window.Camera && window.drawConnectors) {
                    console.log('‚úÖ MediaPipe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
                    resolve();
                } else if (attempts >= maxAttempts) {
                    reject(new Error('MediaPipe libraries ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î'));
                } else {
                    setTimeout(checkMediaPipe, 100);
                }
            };
            
            checkMediaPipe();
        });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
    initializeComponents() {
        try {
            // UI Controller
            this.uiController = new UIController();
            this.uiController.initialize();

            // Exercise Analyzer
            this.exerciseAnalyzer = new ExerciseAnalyzer();

            // Pose Detection System
            this.poseDetection = new PoseDetectionSystem();

            // Canvas Renderer
            const videoElement = document.getElementById('input-video');
            const canvasElement = document.getElementById('output-canvas');
            
            if (videoElement && canvasElement) {
                this.canvasRenderer = new CanvasRenderer(canvasElement, videoElement);
            } else {
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö video ‡∏´‡∏£‡∏∑‡∏≠ canvas element');
            }

            console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
    setupEventListeners() {
        try {
            // Pose detection callbacks
            if (this.poseDetection) {
                this.poseDetection.addDetectionCallback((data) => {
                    this.handlePoseDetection(data);
                });
            }

            console.log('üéØ Event Listeners ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners:', error);
        }
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
    async setupPoseDetection() {
        try {
            this.updateDetectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á...');
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
            await this.poseDetection.initialize();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
            const videoElement = document.getElementById('input-video');
            if (!videoElement) {
                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö video element');
            }
            
            await this.poseDetection.setupCamera(videoElement);
            
            this.updateDetectionStatus('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'detected');
            this.showFeedback('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á');

        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', error);
            this.updateDetectionStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'error');
            throw error;
        }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
    startExercise(exerciseId) {
        try {
            if (!this.isSystemReady) {
                this.showFeedback('‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà', 'warning');
                return false;
            }

            if (!exerciseId) {
                this.showFeedback('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô', 'warning');
                return false;
            }

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤
            const success = this.exerciseAnalyzer.startExercise(exerciseId);
            if (!success) {
                this.showFeedback('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÑ‡∏î‡πâ', 'error');
                return false;
            }
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
            this.startSessionTimer();
            
            this.isExercising = true;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            this.updateDetectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á...', 'detecting');
            
            const exerciseName = StrokeUtils.getExerciseName(exerciseId);
            this.showFeedback(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å: ${exerciseName}`, 'success');
            
            console.log(`üèÉ‚Äç‚ôÇÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å: ${exerciseName}`);
            return true;

        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÑ‡∏î‡πâ:', error);
            this.showFeedback(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
            return false;
        }
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
    stopExercise() {
        if (!this.isExercising) return null;

        try {
            // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            const sessionStats = this.exerciseAnalyzer.stopExercise();
            
            // ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
            this.stopSessionTimer();
            
            this.isExercising = false;

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            this.updateDetectionStatus('‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
            this.showFeedback('‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß');

            console.log('‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
            return sessionStats;

        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å:', error);
            return null;
        }
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
    resetExercise() {
        try {
            this.stopExercise();
            this.exerciseAnalyzer.reset();
            
            this.showFeedback('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
            console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï:', error);
        }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
    handlePoseDetection(data) {
        try {
            if (data.type === 'pose_detected') {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
                if (this.uiController) {
                    this.uiController.updateRealtimeAngles(data.angles);
                }
                
                // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
                if (this.isExercising && this.exerciseAnalyzer) {
                    const analysis = this.exerciseAnalyzer.analyzeExercise(data.results, data.angles);
                    this.handleExerciseAnalysis(analysis);
                }
                
                // ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                if (this.canvasRenderer) {
                    const exerciseState = this.getCurrentExerciseState();
                    this.canvasRenderer.drawPoseResults(data.results, exerciseState);
                }

            } else if (data.type === 'pose_lost') {
                this.updateDetectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û...', 'waiting');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ pose detection:', error);
        }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
    handleExerciseAnalysis(analysis) {
        if (!analysis) return;

        try {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
            if (this.uiController) {
                this.uiController.updateRealtimeInfo({
                    currentAngle: analysis.currentAngle,
                    accuracy: analysis.accuracy,
                    reps: this.exerciseAnalyzer.repCounter,
                    phase: analysis.phase
                });

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                this.uiController.updateStatistics({
                    reps: this.exerciseAnalyzer.repCounter,
                    accuracy: analysis.accuracy,
                    score: this.exerciseAnalyzer.repCounter * 10,
                    targetReps: this.exerciseAnalyzer.exerciseState.targetReps
                });
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° feedback
            if (analysis.feedback) {
                let feedbackType = 'info';
                if (analysis.feedback.includes('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') || analysis.feedback.includes('‡∏î‡∏µ') || analysis.feedback.includes('‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°')) {
                    feedbackType = 'success';
                } else if (analysis.feedback.includes('‡∏õ‡∏£‡∏±‡∏ö') || analysis.feedback.includes('‡∏ä‡πâ‡∏≤')) {
                    feedbackType = 'warning';
                }
                
                this.showFeedback(analysis.feedback, feedbackType);
            }

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            if (analysis.shouldCount) {
                this.handleRepetitionComplete();
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ exercise analysis:', error);
        }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    handleRepetitionComplete() {
        try {
            // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (this.canvasRenderer) {
                this.canvasRenderer.drawSuccessEffect();
            }
            
            // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            if (this.settings.soundEnabled) {
                StrokeUtils.playSuccessSound();
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const state = this.exerciseAnalyzer.getCurrentState();
            if (state.reps >= state.targetReps) {
                this.handleExerciseComplete();
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ repetition complete:', error);
        }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à
    handleExerciseComplete() {
        try {
            this.showFeedback('üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß üéâ', 'success');
            
            if (this.canvasRenderer) {
                this.canvasRenderer.drawMotivationMessage('‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å');
            }
            
            // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            if (this.settings.soundEnabled) {
                StrokeUtils.playCompleteSound();
            }
            
            // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                this.stopExercise();
            }, 3000);

        } catch (error) {
            console.warn('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ exercise complete:', error);
        }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
    startSessionTimer() {
        this.sessionStartTime = Date.now();
        this.sessionDuration = 0;
        
        this.sessionTimer = setInterval(() => {
            this.sessionDuration = Math.floor((Date.now() - this.sessionStartTime) / 1000);
            if (this.uiController) {
                this.uiController.updateTimer(this.sessionDuration);
            }
        }, 1000);
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
    stopSessionTimer() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
            this.sessionTimer = null;
        }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    updateDetectionStatus(message, status = 'waiting') {
        const statusElement = document.getElementById('detection-status');
        if (!statusElement) return;

        const statusIcon = statusElement.querySelector('.status-icon i');
        const statusText = statusElement.querySelector('.status-text');
        
        if (statusText) {
            statusText.textContent = message;
        }
        
        if (statusIcon) {
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            switch(status) {
                case 'correct':
                    statusIcon.className = 'fas fa-check-circle';
                    statusElement.className = 'detection-status correct';
                    break;
                case 'detecting':
                    statusIcon.className = 'fas fa-sync fa-spin';
                    statusElement.className = 'detection-status detecting';
                    break;
                case 'error':
                    statusIcon.className = 'fas fa-exclamation-triangle';
                    statusElement.className = 'detection-status error';
                    break;
                case 'waiting':
                default:
                    statusIcon.className = 'fas fa-search';
                    statusElement.className = 'detection-status waiting';
            }
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° feedback
    showFeedback(message, type = 'info') {
        const feedbackElement = document.getElementById('feedback-text');
        if (!feedbackElement) {
            console.log(`Feedback: ${message}`);
            return;
        }

        feedbackElement.textContent = message;
        feedbackElement.className = `feedback-text ${type}`;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ç‡∏ì‡∏∞
        setTimeout(() => {
            feedbackElement.textContent = '';
            feedbackElement.className = 'feedback-text';
        }, 3000);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    showError(message) {
        console.error('System Error:', message);
        
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #f44336;
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 9999;
            max-width: 400px;
        `;
        errorDiv.innerHTML = `
            <h3>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
            <p>${message}</p>
            <button onclick="this.parentElement.remove()" style="
                background: white;
                color: #f44336;
                border: none;
                padding: 8px 16px;
                border-radius: 5px;
                cursor: pointer;
                margin-top: 10px;
            ">‡∏õ‡∏¥‡∏î</button>
        `;
        document.body.appendChild(errorDiv);
    }

    // ‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    getCurrentExerciseState() {
        if (!this.exerciseAnalyzer) return null;
        
        const state = this.exerciseAnalyzer.getCurrentState();
        return {
            exercise: state.exercise,
            phase: state.phase,
            reps: state.reps,
            targetReps: state.targetReps,
            currentAngle: this.exerciseAnalyzer.lastAngle,
            accuracy: 0 // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        };
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
    saveSession(sessionStats) {
        try {
            const sessionData = {
                ...sessionStats,
                id: StrokeUtils.generateUUID(),
                savedAt: new Date().toISOString()
            };

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
            const sessions = StrokeUtils.getFromStorage('therapy-sessions', []);
            sessions.push(sessionData);
            
            // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if (sessions.length > 50) {
                sessions.splice(0, sessions.length - 50);
            }
            
            StrokeUtils.saveToStorage('therapy-sessions', sessions);
            
            console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:', sessionData);
            return true;

        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ:', error);
            return false;
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    showSessionSummary(sessionStats) {
        if (!sessionStats) return;

        try {
            const summary = {
                exerciseName: sessionStats.exerciseName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                repetitions: sessionStats.repetitions || 0,
                accuracy: Math.round(sessionStats.averageAccuracy || 0),
                duration: StrokeUtils.formatTime(Math.floor(sessionStats.duration / 1000) || 0)
            };
            
            console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å:', summary);

        } catch (error) {
            console.warn('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:', error);
        }
    }

    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
    destroy() {
        console.log('üßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö...');
        
        try {
            this.stopExercise();
            
            if (this.sessionTimer) {
                clearInterval(this.sessionTimer);
            }
            
            if (this.poseDetection) {
                this.poseDetection.destroy();
            }
            
            if (this.exerciseAnalyzer) {
                this.exerciseAnalyzer.reset();
            }
            
            if (this.canvasRenderer) {
                this.canvasRenderer.destroy();
            }
            
            if (this.uiController) {
                this.uiController.destroy();
            }
            
            this.isSystemReady = false;
            this.isExercising = false;
            
            console.log('‚úÖ ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö:', error);
        }
    }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
window.StrokeTherapySystem = StrokeTherapySystem;

console.log('‚úÖ main.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î Stroke ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');