// ========================================
// Profile Edit JavaScript - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
// profile-edit.js (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå - Updated for Render)
// ========================================

// API Configuration for Render
const API_CONFIG = {
    RENDER_URL: 'https://bn1-1.onrender.com',
    LOCAL_URL: 'http://localhost:4000',
    TIMEOUT: 15000 // 15 seconds timeout
};

// Test and determine which API to use
async function getApiBaseUrl() {
    try {
        console.log('üåê Testing Render API connection...');
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);
        
        const response = await fetch(`${API_CONFIG.RENDER_URL}/api/health`, {
            method: 'GET',
            signal: controller.signal,
            headers: { 'Accept': 'application/json' }
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
            console.log('‚úÖ Render API is available');
            return API_CONFIG.RENDER_URL;
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Render API not available:', error.message);
    }
    
    // Fallback to localhost
    console.log('üîÑ Using localhost as fallback');
    return API_CONFIG.LOCAL_URL;
}

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
let currentUser = null;
let originalData = {};
let API_BASE_URL = null; // Will be determined dynamically

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
    
    // Determine API base URL
    API_BASE_URL = await getApiBaseUrl();
    console.log('üì° Using API:', API_BASE_URL);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    checkUserLogin();
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    initializePage();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
    setupEventListeners();
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à)
    setTimeout(() => {
        loadUserData();
    }, 100);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
function checkUserLogin() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å sessionStorage (‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà)
    const sessionUserData = sessionStorage.getItem('userData');
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å localStorage (‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
    const localUserData = localStorage.getItem('user');
    
    if (!sessionUserData && !localUserData) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
        window.location.href = 'login.html';
        return false;
    }
    
    try {
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö sessionStorage ‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà)
        if (sessionUserData) {
            currentUser = JSON.parse(sessionUserData);
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å sessionStorage:', currentUser);
        } else if (localUserData) {
            currentUser = JSON.parse(localUserData);
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage:', currentUser);
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error);
        sessionStorage.removeItem('userData');
        localStorage.removeItem('user');
        window.location.href = 'login.html';
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
function initializePage() {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Header
    displayUserInfo();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    setupBirthDateDropdowns();
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    setupMedicalSection();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó select options ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    updateSelectOptionsToThai();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Header
function displayUserInfo() {
    if (!currentUser) return;
    
    const userNameElement = document.getElementById('currentUserName');
    const userRoleElement = document.getElementById('currentUserRole');
    
    if (userNameElement) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
        let displayName = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
        if (currentUser.first_name && currentUser.last_name) {
            displayName = `${currentUser.first_name} ${currentUser.last_name}`;
        } else if (currentUser.firstName && currentUser.lastName) {
            displayName = `${currentUser.firstName} ${currentUser.lastName}`;
        } else if (currentUser.username) {
            displayName = currentUser.username;
        } else if (currentUser.full_name) {
            displayName = currentUser.full_name;
        }
        userNameElement.textContent = displayName;
    }
    
    if (userRoleElement) {
        let roleText = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
        const role = currentUser.role?.toLowerCase();
        switch(role) {
            case 'patient':
            case '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢':
                roleText = '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢';
                break;
            case 'therapist':
            case 'physiotherapist':
            case '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î':
                roleText = '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î';
                break;
            case 'caregiver':
            case '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•':
                roleText = '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•';
                break;
        }
        userRoleElement.textContent = roleText;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
function setupBirthDateDropdowns() {
    const birthDateSelect = document.getElementById('birthDate');
    const birthMonthSelect = document.getElementById('birthMonth');
    const birthYearSelect = document.getElementById('birthYear');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô (1-31)
    if (birthDateSelect) {
        birthDateSelect.innerHTML = '<option value="">‡∏ß‡∏±‡∏ô</option>';
        for (let day = 1; day <= 31; day++) {
            const option = document.createElement('option');
            option.value = day;
            option.textContent = day;
            birthDateSelect.appendChild(option);
        }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    if (birthMonthSelect) {
        const months = [
            '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
            '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
        ];
        
        birthMonthSelect.innerHTML = '<option value="">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>';
        months.forEach((month, index) => {
            const option = document.createElement('option');
            option.value = index + 1;
            option.textContent = month;
            birthMonthSelect.appendChild(option);
        });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 100 ‡∏õ‡∏µ)
    if (birthYearSelect) {
        const currentYear = new Date().getFullYear();
        const thaiYear = currentYear + 543;
        
        birthYearSelect.innerHTML = '<option value="">‡∏õ‡∏µ</option>';
        for (let year = thaiYear; year >= thaiYear - 100; year--) {
            const option = document.createElement('option');
            option.value = year - 543; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏Ñ.‡∏®.
            option.textContent = year; // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®.
            birthYearSelect.appendChild(option);
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó select options ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function updateSelectOptionsToThai() {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó gender select
    const genderSelect = document.getElementById('gender');
    if (genderSelect) {
        genderSelect.innerHTML = `
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®</option>
            <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
            <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
            <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
        `;
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó injured side select
    const injuredSideSelect = document.getElementById('injuredSide');
    if (injuredSideSelect) {
        injuredSideSelect.innerHTML = `
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô</option>
            <option value="‡∏ã‡πâ‡∏≤‡∏¢">‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</option>
            <option value="‡∏Ç‡∏ß‡∏≤">‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤</option>
            <option value="‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á">‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô</option>
        `;
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó injured part select  
    const injuredPartSelect = document.getElementById('injuredPart');
    if (injuredPartSelect) {
        injuredPartSelect.innerHTML = `
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö</option>
            <option value="‡∏Ç‡∏≤">‡∏Ç‡∏≤</option>
            <option value="‡πÅ‡∏Ç‡∏ô">‡πÅ‡∏Ç‡∏ô</option>
            <option value="‡∏•‡∏≥‡∏ï‡∏±‡∏ß">‡∏•‡∏≥‡∏ï‡∏±‡∏ß</option>
            <option value="‡∏´‡∏±‡∏ß">‡∏´‡∏±‡∏ß</option>
            <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
        `;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå
function setupMedicalSection() {
    const medicalSection = document.getElementById('medicalSection');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
    if (currentUser?.role?.toLowerCase() === 'patient' || currentUser?.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
        if (medicalSection) medicalSection.style.display = 'block';
    } else {
        if (medicalSection) medicalSection.style.display = 'none';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
function setupEventListeners() {
    const form = document.getElementById('profileForm');
    const weightInput = document.getElementById('weight');
    const heightInput = document.getElementById('height');
    const phoneInput = document.getElementById('emergencyContactPhone');
    
    // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    if (form) {
        form.addEventListener('submit', handleFormSubmit);
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á
    if (weightInput) {
        weightInput.addEventListener('input', calculateBMI);
    }
    if (heightInput) {
        heightInput.addEventListener('input', calculateBMI);
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    if (phoneInput) {
        phoneInput.addEventListener('input', formatPhoneNumber);
    }
    
    // Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Real-time
    setupRealTimeValidation();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function loadUserData() {
    try {
        showLoading(true);
        
        if (currentUser && currentUser.user_id) {
            console.log('üìä Current user data:', currentUser);
            
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            fetchUserDataFromAPI();
        } else {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
            showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 'error');
            showLoading(false);
        }
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
        showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
        showLoading(false);
    }
}

/**
 * Make API request with timeout
 */
async function makeApiRequest(endpoint, options = {}) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);

    try {
        const response = await fetch(`${API_BASE_URL}${endpoint}`, {
            ...options,
            signal: controller.signal
        });
        clearTimeout(timeoutId);
        return response;
    } catch (error) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
            throw new Error('Request timeout - Render API might be sleeping');
        }
        throw error;
    }
}

async function fetchUserDataFromAPI() {
    try {
        const url = `/api/users/${currentUser.user_id}`;
        console.log('üì° Fetching user data from API:', API_BASE_URL + url);
        
        const response = await makeApiRequest(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${currentUser.token}`
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ API Response:', result);
            
            if (result.success && result.data) {
                // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
                const apiUserData = result.data;
                const patientInfo = apiUserData.patient_info || {};
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
                const formData = {
                    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Users table
                    user_id: apiUserData.user_id,
                    phone: apiUserData.phone,
                    full_name: apiUserData.full_name,
                    role: apiUserData.role,
                    
                    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Patients table (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    first_name: patientInfo.first_name || extractFirstName(apiUserData.full_name),
                    last_name: patientInfo.last_name || extractLastName(apiUserData.full_name),
                    birth_date: patientInfo.birth_date,
                    gender: patientInfo.gender,
                    weight: patientInfo.weight,
                    height: patientInfo.height,
                    injured_side: patientInfo.injured_side,
                    injured_part: patientInfo.injured_part,
                    emergency_contact_name: patientInfo.emergency_contact_name,
                    emergency_contact_phone: patientInfo.emergency_contact_phone,
                    emergency_contact_relation: patientInfo.emergency_contact_relation,
                    
                    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    token: currentUser.token,
                    apiSource: API_BASE_URL.includes('render.com') ? 'render' : 'localhost'
                };
                
                console.log('üìù Processed form data:', formData);
                
                // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
                originalData = { ...formData };
                
                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó currentUser
                currentUser = { ...currentUser, ...formData };
                
                // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
                setTimeout(() => {
                    populateForm(formData);
                    const source = formData.apiSource === 'render' ? 'Render' : 'localhost';
                    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å ${source} API`);
                }, 200);
                
            } else {
                console.warn('‚ö†Ô∏è API response ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                fallbackToSessionData();
            }
        } else {
            console.warn('‚ö†Ô∏è API call failed, using session data');
            fallbackToSessionData();
        }
        
    } catch (error) {
        console.error('‚ùå API Error:', error);
        fallbackToSessionData();
    } finally {
        setTimeout(() => showLoading(false), 500);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session ‡πÄ‡∏õ‡πá‡∏ô fallback
function fallbackToSessionData() {
    console.log('üì¶ Using session data as fallback');
    originalData = { ...currentUser };
    
    setTimeout(() => {
        populateForm(currentUser);
        console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å session (fallback)');
    }, 200);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å full_name
function extractFirstName(fullName) {
    if (!fullName) return '';
    const parts = fullName.trim().split(' ');
    return parts[0] || '';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏≤‡∏Å full_name
function extractLastName(fullName) {
    if (!fullName) return '';
    const parts = fullName.trim().split(' ');
    return parts.slice(1).join(' ') || '';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
function populateForm(data) {
    console.log('üìù Populating form with data:', data);
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    setFieldValue('firstName', data.first_name || data.firstName || '');
    setFieldValue('lastName', data.last_name || data.lastName || '');
    
    // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏ó‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
    setFieldValue('email', data.phone || data.email || '');
    
    // ‡πÄ‡∏û‡∏® - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const gender = convertGenderToThai(data.gender);
    setFieldValue('gender', gender);
    
    // ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    if (data.birth_date || data.birthDate) {
        const birthDateStr = data.birth_date || data.birthDate;
        try {
            const birthDate = new Date(birthDateStr);
            if (!isNaN(birthDate.getTime())) {
                setFieldValue('birthDate', birthDate.getDate());
                setFieldValue('birthMonth', birthDate.getMonth() + 1);
                setFieldValue('birthYear', birthDate.getFullYear());
                console.log('‚úÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:', {
                    day: birthDate.getDate(),
                    month: birthDate.getMonth() + 1,
                    year: birthDate.getFullYear()
                });
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏î‡πâ:', birthDateStr);
        }
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢
    setFieldValue('weight', data.weight || '');
    setFieldValue('height', data.height || '');
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢)
    if (currentUser?.role?.toLowerCase() === 'patient' || currentUser?.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
        const injuredSide = convertInjuredSideToThai(data.injured_side || data.injuredSide);
        const injuredPart = convertInjuredPartToThai(data.injured_part || data.injuredPart);
        
        setFieldValue('injuredSide', injuredSide);
        setFieldValue('injuredPart', injuredPart);
        
        console.log('üè• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå:', { injuredSide, injuredPart });
    }
    
    // ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    setFieldValue('emergencyContactName', data.emergency_contact_name || data.emergencyContactName || '');
    setFieldValue('emergencyContactPhone', data.emergency_contact_phone || data.emergencyContactPhone || '');
    setFieldValue('emergencyContactRelation', data.emergency_contact_relation || data.emergencyContactRelation || '');
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á
    if (data.weight && data.height) {
        setTimeout(() => calculateBMI(), 300);
    }
    
    console.log('‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function convertGenderToThai(gender) {
    if (!gender) return '';
    
    const genderMapping = {
        'male': '‡∏ä‡∏≤‡∏¢',
        'female': '‡∏´‡∏ç‡∏¥‡∏á',
        'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
        'Male': '‡∏ä‡∏≤‡∏¢',
        'Female': '‡∏´‡∏ç‡∏¥‡∏á',
        'Other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
        '‡∏ä‡∏≤‡∏¢': '‡∏ä‡∏≤‡∏¢',
        '‡∏´‡∏ç‡∏¥‡∏á': '‡∏´‡∏ç‡∏¥‡∏á',
        '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    };
    
    return genderMapping[gender] || gender;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function convertInjuredSideToThai(injuredSide) {
    if (!injuredSide) return '';
    
    const sideMapping = {
        'left': '‡∏ã‡πâ‡∏≤‡∏¢',
        'right': '‡∏Ç‡∏ß‡∏≤',
        'both': '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á',
        'Left': '‡∏ã‡πâ‡∏≤‡∏¢',
        'Right': '‡∏Ç‡∏ß‡∏≤',
        'Both': '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á',
        '‡∏ã‡πâ‡∏≤‡∏¢': '‡∏ã‡πâ‡∏≤‡∏¢',
        '‡∏Ç‡∏ß‡∏≤': '‡∏Ç‡∏ß‡∏≤',
        '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á': '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á'
    };
    
    return sideMapping[injuredSide] || injuredSide;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function convertInjuredPartToThai(injuredPart) {
    if (!injuredPart) return '';
    
    const partMapping = {
        'arm': '‡πÅ‡∏Ç‡∏ô',
        'leg': '‡∏Ç‡∏≤',
        'trunk': '‡∏•‡∏≥‡∏ï‡∏±‡∏ß',
        'head': '‡∏´‡∏±‡∏ß',
        'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
        'Arm': '‡πÅ‡∏Ç‡∏ô',
        'Leg': '‡∏Ç‡∏≤',
        'Trunk': '‡∏•‡∏≥‡∏ï‡∏±‡∏ß',
        'Head': '‡∏´‡∏±‡∏ß',
        'Other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
        '‡πÅ‡∏Ç‡∏ô': '‡πÅ‡∏Ç‡∏ô',
        '‡∏Ç‡∏≤': '‡∏Ç‡∏≤',
        '‡∏•‡∏≥‡∏ï‡∏±‡∏ß': '‡∏•‡∏≥‡∏ï‡∏±‡∏ß',
        '‡∏´‡∏±‡∏ß': '‡∏´‡∏±‡∏ß',
        '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    };
    
    return partMapping[injuredPart] || injuredPart;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏•‡∏î‡πå
function setFieldValue(fieldName, value) {
    const field = document.getElementById(fieldName);
    if (!field) {
        console.warn(`Field ${fieldName} not found in DOM`);
        return;
    }
    
    if (value !== null && value !== undefined && value !== '') {
        field.value = value;
        console.log(`üìù Set ${fieldName} = ${value}`);
        
        // Trigger change event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        const event = new Event('input', { bubbles: true });
        field.dispatchEvent(event);
    } else {
        console.log(`‚ö†Ô∏è Field ${fieldName} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á:`, value);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
async function handleFormSubmit(event) {
    event.preventDefault();
    
    if (isSubmitting) return;
    isSubmitting = true;
    
    console.log('Current User:', currentUser);
    
    if (!validateForm()) {
        showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å', 'error');
        isSubmitting = false;
        return;
    }
    
    const formData = collectFormData();
    console.log('Form Data to send:', formData);
    
    try {
        showLoading(true);
        
        const url = `/api/users/${currentUser.user_id}`;
        console.log('API URL:', API_BASE_URL + url);
        console.log('Token:', currentUser.token);
        
        const response = await makeApiRequest(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${currentUser.token}`
            },
            body: JSON.stringify(formData)
        });
        
        console.log('Response status:', response.status);
        const result = await response.json();
        console.log('Response data:', result);
        
        if (response.ok && result.success) {
            const source = API_BASE_URL.includes('render.com') ? 'Render' : 'localhost';
            showToast(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (${source})`, 'success');
            updateLocalUserData(formData);
        } else {
            showToast(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
        }
        
    } catch (error) {
        console.error('Error:', error);
        showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
    } finally {
        showLoading(false);
        isSubmitting = false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
function collectFormData() {
    const formData = {
        first_name: getFieldValue('firstName').substring(0, 50),
        last_name: getFieldValue('lastName').substring(0, 50),
        gender: getFieldValue('gender'),
        weight: parseFloat(getFieldValue('weight')) || null,
        height: parseInt(getFieldValue('height')) || null,
        emergency_contact_name: getFieldValue('emergencyContactName').substring(0, 100),
        emergency_contact_phone: getFieldValue('emergencyContactPhone').substring(0, 20),
        emergency_contact_relation: getFieldValue('emergencyContactRelation').substring(0, 50)
    };
    
    // ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    const day = getFieldValue('birthDate');
    const month = getFieldValue('birthMonth');
    const year = getFieldValue('birthYear');
    
    if (day && month && year) {
        formData.birth_date = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢)
    if (currentUser?.role?.toLowerCase() === 'patient' || currentUser?.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
        formData.injured_side = getFieldValue('injuredSide');
        formData.injured_part = getFieldValue('injuredPart');
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó full_name
    if (formData.first_name && formData.last_name) {
        formData.full_name = `${formData.first_name} ${formData.last_name}`;
    }
    
    // ‡∏•‡∏ö field ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô empty string
    Object.keys(formData).forEach(key => {
        if (formData[key] === '') {
            formData[key] = null;
        }
    });
    
    console.log('Collected form data:', formData);
    return formData;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå
function getFieldValue(fieldName) {
    const field = document.getElementById(fieldName);
    return field ? field.value.trim() : '';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô sessionStorage
function updateLocalUserData(newData) {
    const updatedUser = { ...currentUser, ...newData };
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô sessionStorage
    sessionStorage.setItem('userData', JSON.stringify(updatedUser));
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô localStorage ‡πÄ‡∏õ‡πá‡∏ô backup
    localStorage.setItem('user', JSON.stringify(updatedUser));
    
    currentUser = updatedUser;
    displayUserInfo();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Validate ‡∏ü‡∏≠‡∏£‡πå‡∏°
function validateForm() {
    let isValid = true;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredFields = ['firstName', 'lastName', 'birthDate', 'birthMonth', 'birthYear', 'gender'];
    
    requiredFields.forEach(fieldName => {
        const field = document.getElementById(fieldName);
        if (!field || !field.value.trim()) {
            setFieldError(fieldName, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            isValid = false;
        } else {
            clearFieldError(fieldName);
        }
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    const phoneField = document.getElementById('emergencyContactPhone');
    if (phoneField && phoneField.value) {
        if (!/^\d{10}$/.test(phoneField.value.replace(/-/g, ''))) {
            setFieldError('emergencyContactPhone', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (10 ‡∏´‡∏•‡∏±‡∏Å)');
            isValid = false;
        } else {
            clearFieldError('emergencyContactPhone');
        }
    }
    
    return isValid;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ Validate ‡πÅ‡∏ö‡∏ö Real-time
function setupRealTimeValidation() {
    const fields = document.querySelectorAll('input, select');
    
    fields.forEach(field => {
        field.addEventListener('blur', function() {
            validateField(this);
        });
        
        field.addEventListener('input', function() {
            if (this.classList.contains('error')) {
                validateField(this);
            }
        });
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Validate ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
function validateField(field) {
    const fieldName = field.id;
    const value = field.value.trim();
    
    // ‡∏•‡∏ö error state ‡πÄ‡∏î‡∏¥‡∏°
    clearFieldError(fieldName);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (field.hasAttribute('required') && !value) {
        setFieldError(fieldName, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return false;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    setFieldSuccess(fieldName);
    return true;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå
function setFieldError(fieldName, message) {
    const field = document.getElementById(fieldName);
    const formGroup = field?.closest('.form-group');
    const errorMessage = formGroup?.querySelector('.error-message');
    
    if (formGroup && errorMessage) {
        formGroup.classList.remove('success');
        formGroup.classList.add('error');
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå
function clearFieldError(fieldName) {
    const field = document.getElementById(fieldName);
    const formGroup = field?.closest('.form-group');
    const errorMessage = formGroup?.querySelector('.error-message');
    
    if (formGroup && errorMessage) {
        formGroup.classList.remove('error');
        errorMessage.style.display = 'none';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Success ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå
function setFieldSuccess(fieldName) {
    const field = document.getElementById(fieldName);
    const formGroup = field?.closest('.form-group');
    
    if (formGroup && field.value.trim()) {
        formGroup.classList.remove('error');
        formGroup.classList.add('success');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
function calculateBMI() {
    const weightInput = document.getElementById('weight');
    const heightInput = document.getElementById('height');
    const bmiDisplay = document.getElementById('bmiDisplay');
    const bmiValue = document.getElementById('bmiValue');
    const bmiCategory = document.getElementById('bmiCategory');
    const bmiStatus = document.getElementById('bmiStatus');
    
    const weight = parseFloat(weightInput?.value);
    const height = parseInt(heightInput?.value);
    
    if (weight && height && weight > 0 && height > 0) {
        const heightInMeters = height / 100;
        const bmi = weight / (heightInMeters * heightInMeters);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ BMI
        if (bmiValue) {
            bmiValue.textContent = bmi.toFixed(1);
        }
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let category, status, categoryClass;
        
        if (bmi < 18.5) {
            category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢';
            status = '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
            categoryClass = 'underweight';
        } else if (bmi < 25) {
            category = '‡∏õ‡∏Å‡∏ï‡∏¥';
            status = '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥';
            categoryClass = 'normal';
        } else if (bmi < 30) {
            category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô';
            status = '‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
            categoryClass = 'overweight';
        } else {
            category = '‡∏≠‡πâ‡∏ß‡∏ô';
            status = '‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏Å';
            categoryClass = 'obese';
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        if (bmiCategory) {
            bmiCategory.textContent = category;
            bmiCategory.className = `bmi-category ${categoryClass}`;
        }
        
        if (bmiStatus) {
            bmiStatus.textContent = status;
            bmiStatus.className = `bmi-status ${categoryClass}`;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á BMI display
        if (bmiDisplay) {
            bmiDisplay.style.display = 'block';
        }
        
    } else {
        // ‡∏ã‡πà‡∏≠‡∏ô BMI display ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
        if (bmiDisplay) {
            bmiDisplay.style.display = 'none';
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
function formatPhoneNumber(event) {
    let value = event.target.value.replace(/\D/g, ''); // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏´‡∏•‡∏±‡∏Å
    if (value.length > 10) {
        value = value.substring(0, 10);
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö XXX-XXX-XXXX
    if (value.length >= 6) {
        value = `${value.substring(0, 3)}-${value.substring(3, 6)}-${value.substring(6)}`;
    } else if (value.length >= 3) {
        value = `${value.substring(0, 3)}-${value.substring(3)}`;
    }
    
    event.target.value = value;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
function resetForm() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
        document.getElementById('profileForm').reset();
        
        // ‡∏•‡∏ö error states
        const formGroups = document.querySelectorAll('.form-group');
        formGroups.forEach(group => {
            group.classList.remove('error', 'success');
        });
        
        // ‡∏ã‡πà‡∏≠‡∏ô BMI display
        const bmiDisplay = document.getElementById('bmiDisplay');
        if (bmiDisplay) {
            bmiDisplay.style.display = 'none';
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        if (originalData) {
            populateForm(originalData);
        }
        
        showToast('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß', 'info');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Loading
function showLoading(show) {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const saveButton = document.getElementById('saveButton');
    
    if (loadingOverlay) {
        if (show) {
            loadingOverlay.classList.add('show');
        } else {
            loadingOverlay.classList.remove('show');
        }
    }
    
    if (saveButton) {
        saveButton.disabled = show;
        if (show) {
            const source = API_BASE_URL && API_BASE_URL.includes('render.com') ? ' (Render)' : '';
            saveButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å${source}...</span>`;
        } else {
            saveButton.innerHTML = '<i class="fas fa-save"></i><span>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>';
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Toast Notification
function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastIcon = toast?.querySelector('.toast-icon i');
    const toastMessage = toast?.querySelector('.toast-message');
    
    if (!toast) return;
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (toastMessage) {
        toastMessage.textContent = message;
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏≤‡∏° type
    if (toastIcon) {
        toast.className = 'toast'; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï class
        
        switch (type) {
            case 'success':
                toastIcon.className = 'fas fa-check-circle';
                break;
            case 'error':
                toast.classList.add('error');
                toastIcon.className = 'fas fa-exclamation-circle';
                break;
            case 'warning':
                toast.classList.add('warning');
                toastIcon.className = 'fas fa-exclamation-triangle';
                break;
            case 'info':
                toastIcon.className = 'fas fa-info-circle';
                break;
        }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á Toast
    toast.classList.add('show');
    
    // ‡∏ã‡πà‡∏≠‡∏ô Toast ‡∏´‡∏•‡∏±‡∏á 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
        toast.classList.remove('show');
    }, 4000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
function goBack() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const currentData = collectFormData();
    const hasChanges = JSON.stringify(currentData) !== JSON.stringify(originalData);
    
    if (hasChanges) {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            navigateBack();
        }
    } else {
        navigateBack();
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö
function navigateBack() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    switch (currentUser?.role?.toLowerCase()) {
        case 'patient':
        case '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢':
            window.location.href = 'patient-dashboard.html';
            break;
        case 'therapist':
        case 'physiotherapist':
        case '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î':
            window.location.href = 'therapist-dashboard.html';
            break;
        case 'caregiver':
        case '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•':
            window.location.href = 'caregiver-dashboard.html';
            break;
        default:
            window.history.back();
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
function logout() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        sessionStorage.removeItem('userData');
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        localStorage.removeItem('authToken');
        
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        window.location.href = 'login.html';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
function debugUserData() {
    console.log('üîç Debug User Data:');
    console.log('currentUser:', currentUser);
    console.log('API_BASE_URL:', API_BASE_URL);
    
    if (currentUser) {
        console.log('User properties:');
        Object.keys(currentUser).forEach(key => {
            console.log(`  ${key}:`, currentUser[key]);
        });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fields ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    const fields = ['firstName', 'lastName', 'email', 'gender', 'birthDate', 'birthMonth', 'birthYear', 'weight', 'height'];
    console.log('üîç Form fields status:');
    fields.forEach(fieldName => {
        const field = document.getElementById(fieldName);
        if (field) {
            console.log(`  ${fieldName}: exists, value = "${field.value}"`);
        } else {
            console.log(`  ${fieldName}: NOT FOUND`);
        }
    });
}

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ã‡πâ‡∏≥
let isSubmitting = false;

// Error Handlers
window.addEventListener('error', function(event) {
    console.error('‚ùå JavaScript Error:', event.error);
    showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 'error');
});

window.addEventListener('unhandledrejection', function(event) {
    console.error('‚ùå Unhandled Promise Rejection:', event.reason);
    showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
    event.preventDefault();
});